各种工具的api特点分析
**************************

typst的cetz包
=================

cetz包的画图api借鉴于latex的tikz和processing。语法是typst函数式调用。我们关注的重点是其\
的绘画流程以及他是如何简化画图的。

基础用法
----------

.. code:: c

    #import "@preview/cetz:0.2.0"

    #cetz.canvas({
        import cetz.draw: *
        ...//Your draw
    })

cetz提供的基础画图元素
------------------------

cetz提供了一些基本形状：

.. code:: c 

    circle() // 圆和椭圆，圆心和直径
    circle-through() // 过三点画圆
    arc() // 圆弧，扇形
    arc-through() // 过点画圆弧
    mark() // 箭头
    line() // 直线
    grid() // 网格
    content() // 任何pdf的内容
    rect() // 矩形和可以改变转角的矩形
    bezier() // 贝塞尔曲线
    bezier-through() // 过三点画贝塞尔曲线
    catmull() // catmull-Rom 插值样点曲线
    hobby() // Hobby 插值样点曲线
    merge-path() // 通过连接成封闭曲线合并在其中的路径,可用于填充
    
用于确定基础形状的参数一般以点和长度、角度的形式传递。

cetz提供了一些对一组图像做处理的函数：

.. code:: c 

    hide() // 隐藏一些形状
    intersection() // 将一组形状的交点，以小原点的形式画出
    group() // 将其内部的图像划为一组,其内部的一些绘图调整不会影响组外部分
    anchor() // 将一点登记为有名字的锚点
    copy-anchors() // 复制一组元素的锚点
    set-ctx()
    get-ctx()
    for-each-anchor() // 对其组内的所有锚点处理
    on-layer() // 在某一图层中作图

cetz提供了一些变换函数，用于改变输入数据空间到绝对数据空间的对应关系：

.. code:: c 

    rotate() // 坐标系旋转
    translate() // 坐标系平移
    scale() // 坐标系放缩
    set-origin() // 设置坐标系原点
    move-to() // 设置当前坐标，当前坐标可以通过 ()作为参数传入
    set-viewport() // 在一个矩形的区域设置新的坐标系

cetz提供了坐标表示方式：

.. code:: c 

    // 三维直角坐标系 XYZ
    line((0,0,0),(x:1))
    line((1,2,3),(x:1,y:1,z:3))
    // 相对坐标（相对当前坐标）
    line(rel:(0,-1),rel:(0,1))
    // 极坐标
    line((angle:30deg,radius:1cm),(10deg,1))
    // 质心坐标
    // 锚点
    line("a.end") //锚点的使用需要先注册
    // 切线
    // 垂线
    // 交点
    // 函数

cetz 还提供了一些高级绘图模块：

.. code:: c 

    cetz.tree.tree() // 树状图
    cetz.plot // 用于数据画图的模块
    cetz.chart // 用于画图表的模块
    cetz.palette // 用于和色条
    cetz.angle // 用于画角度
    cetz.decorations // 

cetz设置图形样式的方式有两种：

.. code:: c 

    // 通过一个函数统一设置
    set-style() // 此函数既可设置所有图形的样式，也可为某一类图形单独设置
    // 在画图时输入图形样式参数
    line((0,0),(1,1),stroke:blue)

特性总结
------------

**基础作图流程**

1. 创建画布
   
   .. code:: c 
      
      cetz.canvas() // 可以设置画布单位长度，等等。没有任何图形的画布是空白的

2. 画布函数的必需参数是一个代码块，用于完成所有的绘图操作：

  .. code:: c 

    cetz.canvas({
        ...
    })

3. 通过调用函数进行函数式绘图：
   
   1. 直接调用基本图形函数绘图
   2. 通过分组函数，使绘图更易理解

**cetz的绘图特性1——丰富的坐标表示系统**

cetz表示一个坐标的方式很多，有直角绝对坐标，极坐标，相对坐标，锚点...

这种表达方式可以尽量简化输入坐标的操作：

1. 一些简单坐标可以直接输入，不用自己计算一遍
2. 一些特殊坐标可以直接输入，如切点，垂足，交点
3. 对输入坐标还可以传入函数处理

这些坐标操作覆盖了大量可能输入的坐标形式，特别是在绘制几何图形的时候，而不是数据处理，数据处理推荐使用python数据绘图的相关库。

**cetz的绘图特性2——锚点命名系统**

所有的绘图函数都有一个可选参数 ``name`` ， 命名后可以使用锚点字符串输入坐标。

这符合几何画图的习惯，对绘制的图形命名，然后调用。

这样的设计避免了设置许多变量，相互传递。

**cetz的绘图特性3——输入数据空间到绝对数据空间的变换**

如果说绝对数据空间就是在画布上的初始直角坐标系，画布上每一个都有唯一的值。且初始输入数据空间等同于绝对数据空间。

但是这个关系也是可以设置的，例如一系列坐标系变换：

* 旋转
* 平移
* 放缩
* 设置局部坐标系
* 设置输入数据空间到绝对数据空间的变换矩阵

这些变换不用用户自己进行编写，只用调用内部的函数既可，极大优化了作图体验。

**cetz的绘图特性4——三维空间的对应关系**

由于cetz绘制的图形是静止的图像，且为二维，但是cetz也支持三维坐标，
这是通过z轴以与xoy平面45度直线以及相应的长度变换完成的。

这种变换适用于概念图，但不是绝对的反映三维物体的形体，但是三维图形一般使用函数作图居多，这里这样处理也是合理的。









latex的tikz包
=================

process.py 
=============

matplotlib
=============


seanborn
===========

plotly
=========

pyecharts
===========

turtle
=======

总结
=====