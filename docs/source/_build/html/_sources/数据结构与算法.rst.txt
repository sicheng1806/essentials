数据结构与算法
#############################

.. _example_code: https://github.com/sicheng1806/DateStructure

在数据结构的讨论中，重点研究的是“结构”，而把组成结构的那些元素抽象成为一个结点。结点是数据结构中的基本单位，在有些结构中，也把结构称为元素、记录或表目。

结点之间的结构关系称为数据结构，有线性结构、树形结构、集合、字典和图形结构。数据结构可以联想为结点之间的连线（关系），线性连接的为线性结构，树形连接的为树形结构，图形连接的为图形结构，没有连接的为集合或字典。

第0章——C的回顾
************************

使用对 `example_code`_ 的源码分析来回顾c

头文件与程序结构
===========================

1. 防止重复预定义的方法

.. code-block:: c

    #ifndef STATUS_H
    #define STATUS_H
    // 正式的预定义内容
    #endif

2. 预处理命令

.. code-block:: c

    #define A B // 采用特殊的字符串语法来定义常量、函数等
    #define True        1 // 简单将True替换为1
    #define message_for(a,b) printf(#a " and " #b ": We love you!\n") // 会将a，b替换成具体的内容，相当于函数定义
    #define square(x) ((x) * (x))// 同
    #include <stdio.h> // 导入标准库
    #include "test.h" // 导入自定义库
    #undef True //取消宏
    #ifndef A // 如果没有定义A则
    #ifdef A // 如果定义A则

    #if !defined (MESSAGE)
        #define MESSAGE "You wish!"
    #endif //if语句的终点，适用于出现的三个if预处理命令

    #error	//当遇到标准错误时，输出错误消息
    #pragma	//使用标准化方法，向编译器发布特殊的命令到编译器中

3. 头文件的编写

对 ``Status.h`` 和 ``VEML7700.h`` 的学习下得出以下结构：

.. code-block:: c++

    // 1.防止重复定义处理
    #ifndef VEML7700
    #define VEML7700
    // 2.导入所需的包
    #include <Arduino.h> 
    #include <Wire.h>
    // 3.预定义常量或预定义函数语句
    #define True        1
    #define FALSE       0
    // 4. 函数声明
    /*
    * 从文件中读取预设的英文符号
    *
    * 这是自定义的数据录入函数，用于从文件fp中读取格式化的输入，
    * 与fscanf的不同之处在于此函数只会读取英文字符，对于中文字符，则直接跳过。
    *
    * 注：
    * 1. 这里约定所有格式串为简单形式，如：%d%c%s等，而不是%2d%5s等
    * 2. 读取字符串时，遇到空格或非打印字符会停止读取
    */
    int ReadData(FILE* fp, char* format, ...);
    // 5. 类声明（c++)
    class VEML7700
    {
    public:
        enum als_gain_t{
            ALS_GAIN_x1 = 0x0,
            ALS_GAIN_x2 = 0x1
            }; // 注意哪类的常量适合枚举

        VEML7700();

        uint8_t setGain(als_gain_t gain);
    
    private:
        enum { I2C_ADDRESS = 0x10 };

    };

    #endif

4. 程序结构

程序使用 ``int main();`` 函数作为主程序入口。

编译和链接
===================

编译是 ``*.c`` 输出为二进制文件 ``*.o`` ，此时的文件通过了语法检测并转换为了二进制，但依赖关系并没有解决

链接是 ``*.o`` 输出为可执行文件 ``*`` 或 ``*.exe`` ,此时文件已经解决了依赖关系，包括与系统的依赖关系和标准库和自定义库的依赖关系。

采用 ``gcc -c file1.c -o file2.o`` 编译文件，其中-o 默认为file1.o。

采用 ``gcc -o file [file1.o file2.o ...]`` 来链接程序。

已经完成使用make 自动编译和链接程序——学习Makefile的语法。

c数据结构
=================

基本数据类型占用内存量
-------------------------

``sizeof`` 用于获取类型的储存字节，值得注意的是 ``sizeof(void)`` 返回 1 。

整型、字符型和浮点型有: 
1. int uint(表示 unsigned int) luint(表示long unsigned int) 分别占4 4 8 字节。
2. char uchar 占 1 1 字节。1 字节有8位比特
3. float double 占 4 8 字节
4. void 占 1 字节

分配内存和管理内存
--------------------------

1. ``void*`` 指针表示未被赋予具体类型的地址，可以通过强制类型转换为希望的类型如：

`` int* p_a = (int*) malloc(8 * sizeof(int))`` 

2. malloc用于分配内存，free用于释放内存。free释放后的内存内的数据已经不再可信。
3. 指针可以使用索引取值 ``p_a[i]`` 等价于 ``(*(p_a + i))``。
4. realloc用于重新分配之前用malloc或alloc分配的内存，返回形式和malloc一样。对于数据结构扩容很有效。



控制流工具
===============

PASS

输入与输出
===============

PASS

错误和异常
==============

PASS


第一章——线性结构
************************

线性结构指结点以顺序结构储存。

线性表
==============

线性表根据储存类型的不同分为顺序表和链表。链表分为单链表，循环单链表，双链表和循环双链表。

线性表模型：

使用a_i,表示第i个元素。a_0为第一个元素。a_i 等价与 a[i]

顺序表
-------------

1. 结点结构

.. code-block:: c
    
    typedef struct {
        ElemType* elem;     // 顺序表存储空间的基址（指向顺序表所占内存的起始位置）
        int length;   // 当前顺序表长度（包含多少元素）
        int listsize; // 当前分配的存储容量（可以存储多少元素）
    } SqList;

elem为链表头地址

2. 初始化

使用malloc分配内存，length=0

3. 插入元素

令索引大于i的元素向后移动一位，对a_i赋值。代价o(n)

4. 删除元素

令索引大于i的元素向前移动一位，代价o(n)

5. 删除

释放elem指向的内存

单链表
--------------

1. 结点结构

.. code-block:: c

    typedef struct LNode {
        ElemType data;      // 数据结点
        struct LNode* next; // 指向下一个结点的指针
    } LNode;

2. 初始化

分配内存，next指向空

3. 插入元素

令索引i-1的next指向新结点，新结点的next指向索引i结点。

4. 删除元素

令索引i-1的next指向i+1，释放i的内存。

5. 删除

释放所有结点next指向的内存

循环单链表
-------------------

将最后一个元素指向第一个元素就形成循环单链表

双链表
------------------

单链表基础上增加一个指向前继的指针

字符串
==================

与线性表相比，字符串更加注重整体的运算，而线性表更加注重元素的操作。其储存逻辑基本通用

字符串的模式匹配
--------------------

问题描述：对于字符串s和p，求p是否在s中，如果在则返回第一次匹配成功的索引

1. 朴素的模式匹配算法

.. code-block:: python
    
    def index(s:str,p:str): 
        
        for i in range(len(s)-len(p) + 1): 
            if p == s[i:i+len(t)]: 
                return i 
        return False 

2. 无回溯的模式匹配算法

问题进一步描述：朴素的模式匹配算法的低效在于每次匹配失败都只右移1位，并且没有利用字符串s或p的性质，
Knuth 等人发现下次匹配失败后存在k值，可以直接向右移动k位并用p_k进行下一次比较，由k组成的数组next存在且
只与p有关。

    t0 ... tm p0 p1 p2 p3 p4 ... pi-1 tn ... tN 
                p0 p1 p2 p3 ... pi-2 pi           必定失败 =: p[1:i] != p[0:i-1]
                                    pk pk+1 ...   若从pk开始下一次比较

                        p0 p1 ... pk-1            说明p[0:k] == p[i-k:i],前缀等于后缀

    k 最大等于在p[0:i]字符串中，最长的前缀匹配后缀问题。

    即：
    pk = p[next[i]]
    next[i] = max(符合(p[0:k] == p[i-k:i]))

假设next数组已经求出

.. code-block:: python

    def index(s:str,p:str):
        p_next = makeNext(p)
        i = 0
        for j in range(len(s)):
            if i >= len(p):
                return j-len(p) #退出条件
            if p[i] == s[j]: 
                i += 1
                continue
            else:
                i = p_next[i]
                continue
        return len(s) - len(p) # 表示s与p在最末尾匹配成功

求_next数组:

.. code-block:: python

    def makeNext(p:str):
    '''返回字符创p的next数组'''
    _next = [0] # i = 0时必定为0
    for i in range(1,len(p)):
        # p[0:k] == p[i-k:i]
        for k in range(i-1,0,-1):
            if p[0:k] == p[i-k:i]:
                _next.append(k)
            _next.append(0)
    return _next

_next数组的优化：

尚可优化。

栈
=============

栈(stack)：一种特殊的线性表，插入和删除都只能在表的同一端进行；

也分为顺序栈和链栈

1. 顺序栈

结点表示

.. code:: C

    struct SeqStack
    {
        int MaxNum;
        int top;
        DataType * s;
    };

其他：

略

2. 顺序栈的共享技术

两个栈共享一个数组，栈顶分别在数组的两端

3. 链栈

结点表示：

.. code:: C

    typedef struct Node
    {
        DataType info;
        PNode link;
    };

栈的应用
-----------------

1. 栈与数制转换

问题描述： 将十进制数N转换为m进制数M

问题分析::
    用m_n,m_n-1,...,m_0表示M,
    通过求余和整除可以依次求得m_0,m_1,...,m_n
    数据要求高位输出因而满足先进后出的栈要求，使用栈来承接结果。

算法 `m进制整数求法
<https://github.com/sicheng1806/essentials/scr_test/py/m进制整数求法.py>`_

2. 栈与括号匹配

问题描述： 对文字的括号用法进行判别正误

问题分析： 将读到左括号入栈，读到右括号出栈，出栈与入栈类型不匹配或读完栈未空视为错误。


队列
===========

队列是满足先进先出的线性结构

在python中collection.deque便是队列。

队列的先进先出适用于生产者-消费者模型的数据传输，因而在多进程管理中python提供了queue模块用于在多线程数据的传输

树形结构
*****************

树型结构：唯一前驱，后继可以不唯一

深度或高度(depth)

度数：结点的度数等于结点的子结点树

二叉树：度数小于2

满二叉树：任意结点，要么度为0，要么度为2。

完全二叉树：1 只允许最后两层结点的度数小于2;2 最后一层结点都集中在该层最左边的若干位置。

二叉树与二叉树的遍历
========================

ADL
