数据结构与算法
#############################

.. _example_code: https://github.com/sicheng1806/DateStructure

在数据结构的讨论中，重点研究的是“结构”，而把组成结构的那些元素抽象成为一个结点。结点是数据结构中的基本单位，在有些结构中，也把结构称为元素、记录或表目。

结点之间的结构关系称为数据结构，有线性结构、树形结构、集合、字典和图形结构。数据结构可以联想为结点之间的连线（关系），线性连接的为线性结构，树形连接的为树形结构，图形连接的为图形结构，没有连接的为集合或字典。

第0章——C的回顾
************************

使用对 `example_code`_ 的源码分析来回顾c

头文件与程序结构
===========================

1. 防止重复预定义的方法

.. code-block:: c

    #ifndef STATUS_H
    #define STATUS_H
    // 正式的预定义内容
    #endif

2. 预处理命令

.. code-block:: c

    #define A B // 采用特殊的字符串语法来定义常量、函数等
    #define True        1 // 简单将True替换为1
    #define message_for(a,b) printf(#a " and " #b ": We love you!\n") // 会将a，b替换成具体的内容，相当于函数定义
    #define square(x) ((x) * (x))// 同
    #include <stdio.h> // 导入标准库
    #include "test.h" // 导入自定义库
    #undef True //取消宏
    #ifndef A // 如果没有定义A则
    #ifdef A // 如果定义A则

    #if !defined (MESSAGE)
        #define MESSAGE "You wish!"
    #endif //if语句的终点，适用于出现的三个if预处理命令

    #error	//当遇到标准错误时，输出错误消息
    #pragma	//使用标准化方法，向编译器发布特殊的命令到编译器中

3. 头文件的编写

对 ``Status.h`` 和 ``VEML7700.h`` 的学习下得出以下结构：

.. code-block:: c++

    // 1.防止重复定义处理
    #ifndef VEML7700
    #define VEML7700
    // 2.导入所需的包
    #include <Arduino.h> 
    #include <Wire.h>
    // 3.预定义常量或预定义函数语句
    #define True        1
    #define FALSE       0
    // 4. 函数声明
    /*
    * 从文件中读取预设的英文符号
    *
    * 这是自定义的数据录入函数，用于从文件fp中读取格式化的输入，
    * 与fscanf的不同之处在于此函数只会读取英文字符，对于中文字符，则直接跳过。
    *
    * 注：
    * 1. 这里约定所有格式串为简单形式，如：%d%c%s等，而不是%2d%5s等
    * 2. 读取字符串时，遇到空格或非打印字符会停止读取
    */
    int ReadData(FILE* fp, char* format, ...);
    // 5. 类声明（c++)
    class VEML7700
    {
    public:
        enum als_gain_t{
            ALS_GAIN_x1 = 0x0,
            ALS_GAIN_x2 = 0x1
            }; // 注意哪类的常量适合枚举

        VEML7700();

        uint8_t setGain(als_gain_t gain);
    
    private:
        enum { I2C_ADDRESS = 0x10 };

    };

    #endif

4. 程序结构

程序使用 ``int main();`` 函数作为主程序入口。

编译和链接
===================

编译是 ``*.c`` 输出为二进制文件 ``*.o`` ，此时的文件通过了语法检测并转换为了二进制，但依赖关系并没有解决

链接是 ``*.o`` 输出为可执行文件 ``*`` 或 ``*.exe`` ,此时文件已经解决了依赖关系，包括与系统的依赖关系和标准库和自定义库的依赖关系。

采用 ``gcc -c file1.c -o file2.o`` 编译文件，其中-o 默认为file1.o。

采用 ``gcc -o file [file1.o file2.o ...]`` 来链接程序。

已经完成使用make 自动编译和链接程序——学习Makefile的语法。

数据结构
=================


控制流工具
===============

输入与输出
===============

错误和异常
==============



第一章——线性结构
************************

线性结构指结点以顺序结构储存。

线性表
==============

1. 抽象结构