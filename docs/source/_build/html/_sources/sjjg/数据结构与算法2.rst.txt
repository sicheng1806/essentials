树、图与算法
***********************

**前置概念**

* *树型结构*：唯一前驱，后继可以不唯一
* *集合*：不存在前驱、后继的关系
* *线性结构*：唯一前驱，唯一后继
* *图结构*：前驱、后继均可不唯一
* *结点的度*：一个结点的分枝个数
* *层*、 *深度*


二叉树
=====================

*二叉树（Binary tree）*：是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。
  通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。

二叉树第i层至多拥有 :math:`2^{i-1}`;深度为k的二叉树至多共有 :math:`2^{k+1} - 1` 个节点。

对任意一棵非空的二叉树，如果其叶片数为 :math:`n_0` ，分支度为 2 的节点数为 :math:`n_2` ，则 :math:`n_0 = n_2 + 1`

*满二叉树*：拥有最大节点树的二叉树

*完全二叉树*：在一颗二叉树中，若除最后一层外的其余层都是满的，并且最后一层要么是满的，要么在右边缺少连续若干节点，则此二叉树为完全二叉树（Complete Binary Tree）。
  完全二叉树可以通过在末尾增加结点转换为满二叉树。具有n个节点的完全二叉树的深度为 :math:`[log_2n] + 1`

*平衡树*: 平衡树是计算机科学中的一类数据结构，为改进的二叉查找树。
一般的二叉查找树的查询复杂度取决于目标结点到树根的距离（即深度），因此当结点的深度普遍较大时，查询的均摊复杂度会上升[1]。
为了实现更高效的查询，产生了平衡树。在这里，平衡指所有叶子的深度趋于平衡，更广义的是指在树上所有可能查找的均摊复杂度偏低。

**二叉树与普通树的区别**:

* 与普通树不同，普通树的节点个数至少为1，而二叉树的节点个数可以为0；
* 普通树节点的最大分支度没有限制，而二叉树节点的最大分支度为2；
* 普通树的节点无左、右次序之分，而二叉树的节点有左、右次序之分。

二叉树的周游（遍历）
-----------------------------

**深度优先搜索**

.. image:: ./images/深度优先搜索.png
    :align: right
    :width: 15em
    :alt: Depth-First-Search(DFS)

深度优先搜索算法（Depth-First-Search，缩写为DFS）是一种用于遍历或搜索树或图的算法。
这个算法会尽可能深地搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。
这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，
则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。
这种算法不会根据图的结构等信息调整执行策略。 

